{
	// Place your snippets for java here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
// 	"Print to console": {
// 		"prefix": "log",
// 		"body": [
// 			"console.log('$1');",
// 			"$2"
// 		],
// 		"description": "Log output to console"
// 	}
// }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



"-----": {
	"prefix": "----",
	"body": [
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	],
	"description": "-----"
}
/////////////////////Get started Code////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"Start up code": {
	"prefix": "main",
	"body": [
		"import java.util.Scanner;  // Import the Scanner class",
		"",
		"class $1 {",
		"  public static void main(String[] args) {",
		"		Scanner sc = new Scanner(System.in);  // Create a Scanner object",
		"		$2",
		"  }",
		"}"
	],
	"description": ""
}
///////////////Find factorial of number//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"Factorial of a Number": {
	"prefix": "factorial",
	"body": [
		"  static int factorial(int n) {",
		"      if(n == 1) {  // If input is 1 then factorial is 1",
		"      return (1);",
		"    }",
		"    else { // Else recersively call factorial function",
		"      return (n * factorial(n - 1));",
		"    }",
		"  }",
	],
	"description": "-----"
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"Template for CP" : {
    "prefix": "late",
    "body":[
"import java.util.*;",
"import java.io.*;",

"public class Main {",
"	$LINE_COMMENT For fast input output",
"	static class FastReader {",
"		BufferedReader br;",
"		StringTokenizer st;",
 
"		public FastReader()",
,
"		{ try {br = new BufferedReader(new FileReader(\"C:\\java io\\input.txt\"));",
"			PrintStream out = new PrintStream(new FileOutputStream(\"C:\\java io\\output.txt\"));",
"			System.setOut(out);}",
"		  catch(Exception e) { ",
"			br = new BufferedReader(new InputStreamReader(System.in));}",
"		}",
 
"		String next()",
"		{",
"			while (st == null || !st.hasMoreElements()) {",
"				try {st = new StringTokenizer(br.readLine());}",
"				catch (IOException e) {",
"					e.printStackTrace();}",
"			}",
"			return st.nextToken();",
"		}",
 
"		int nextInt() { return Integer.parseInt(next()); }",         
"		long nextLong() { return Long.parseLong(next()); }",         
"		double nextDouble() {return Double.parseDouble(next()); }",
 
"		String nextLine()",
"		{",
"			String str = \"\";",
"			try {",
"			str = br.readLine();",
"			}",
"			catch (IOException e) {",
"				e.printStackTrace();",
"			}",
"			return str;",
"		}",
"	}",
"	$LINE_COMMENT end of fast i/o code",

    
"	public static void main(String[] args) {",
"		FastReader reader = new FastReader();",
"		$0",
"}",
    ],
    "description": "template for cp in java"
},

"For loop":{
    "prefix" : "forl",
    "body" : [
        "for(int i = 0; i < $0; i++)"
    ]
} 
///////////////////////////competitive proramming template/////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
  
"Template for CP":{
    "prefix" : "template",
    "body" : [
"import java.util.*;",
"import java.io.*;",
"public class cp",
"{",
"	$LINE_COMMENT For fast input output",
"    static class FastReader ",
"    {",
"        BufferedReader br;",
"        StringTokenizer st;",
"        public FastReader()",
"        {",
"            try",
"            {",
"				$LINE_COMMENT Add \"\\\" slash to remove error",
"                br = new BufferedReader(new FileReader(\"C:\\java io\\input.txt\"));",
"                PrintStream out = new PrintStream(new FileOutputStream(\"C:\\java io\\output.txt\"));",
"                System.setOut(out);",
"            }",
"          catch(Exception e)",
"          {",
"            br = new BufferedReader(new InputStreamReader(System.in));}",
"          }",
"        String next()",
"        {",
"            while (st == null || !st.hasMoreElements())",
"            {",
"                try {st = new StringTokenizer(br.readLine());}",
"                catch (IOException e) {",
"                    e.printStackTrace();}",
"            }",
"            return st.nextToken();",
"        }",
"        int nextInt() { return Integer.parseInt(next()); }",
"        long nextLong() { return Long.parseLong(next()); }",
"        double nextDouble() {return Double.parseDouble(next()); }",
"        String nextLine()",
"        {",
"            String str = \"\";",
"            try {",
"            str = br.readLine();",
"            }",
"            catch (IOException e)",
"            {",
"                e.printStackTrace();",
"            }",
"            return str;",
"        }",
"    }",
"	$LINE_COMMENT end of fast i/o code",
"",
"    public static void main(String[] args) {",
"        FastReader reader = new FastReader();",
"        int n = reader.nextInt();",
"        int k = reader.nextInt();",
"		 $0",
"",
"    }",
"}",
"",
"",
"",		
    ]
} 



}


